using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;

namespace ICM.Web.Models
{
    public class AppointmentResourceModels
    {
        public AppointmentResourceModels()
        {
            this.ActivityBookings = new HashSet<ActivityBookingModels>();
            this.AppointmentResourceAvailableTimes = new HashSet<AppointmentResourceAvailableTime>();
            this.AppointmentResourceDayOffs = new HashSet<AppointmentResourceDayOff>();
            this.CaseManagements = new HashSet<CaseManagement>();
            this.CaseProviders = new HashSet<CaseProvider>();
        }
        [Key]
        [Display(Name = "Appointment Resource")]
        public long AppointmentResourceID { get; set; }

        [Display(Name = "Booking Type")]
        [Required]
        public long AppointmentResourceBookingTypeID { get; set; }

        [Display(Name = "Branch")]
        public Nullable<long> CompanyBranchID { get; set; }

        [Display(Name = "First Name")]
        [Required]
        [StringLength(50)]
        [RegularExpression(@"^[a-zA-Z\s]+$", ErrorMessage = "Letters only")]
        public string FirstName { get; set; }

        [Display(Name = "Last Name")]
        [Required]
        [StringLength(50)]
        [RegularExpression(@"^[a-zA-Z\s]+$", ErrorMessage = "Letters only")]
        public string LastName { get; set; }

        [Required]
        [StringLength(50)]
        [RegularExpression(@"^[a-zA-Z\s]+$", ErrorMessage = "Letters only")]
        public string Description { get; set; }

        [Display(Name = "HCAI Provider")]
        [Required]
        [StringLength(50)]
        public string HCAIProviderRegistryID { get; set; }

        [Display(Name = "Reg. No.")]
        [Required]
        [StringLength(50)]
        public string CollegeRegistrationNumber { get; set; }

        [Display(Name = "Web Code")]
        [Required]
        [StringLength(50)]
        public string WebAccessCode { get; set; }

        [Display(Name = "Dbl Booking")]
        [Required]
        public bool DoubleBookingAllowed { get; set; }

        [Display(Name = "Address 1")]
        [Required]
        [StringLength(150)]
        [RegularExpression(@"^[a-zA-Z0-9 ]+$", ErrorMessage = "Letters and numbers only")]
        public string Address1 { get; set; }

        [Display(Name = "Address 2")]
        [Required]
        [StringLength(150)]
        [RegularExpression(@"^[a-zA-Z0-9 ]+$", ErrorMessage = "Letters and numbers only")]
        public string Address2 { get; set; }

        [Display(Name = "Address 3")]
        [Required]
        [StringLength(150)]
        [RegularExpression(@"^[a-zA-Z0-9 ]+$", ErrorMessage = "Letters and numbers only")]
        public string Address3 { get; set; }

        [Required]
        [StringLength(60)]
        [RegularExpression(@"^[a-zA-Z\s]+$", ErrorMessage = "Letters only")]
        public string City { get; set; }

        [Display(Name = "Province/State")]
        [Required]
        public long ProvinceOrStateID { get; set; }

        [Display(Name = "PostalCode")]
        [Required]
        public string PostalCodeOrZipCode { get; set; }

        [Display(Name = "Country")]
        [Required]
        public long CountryID { get; set; }

        [Display(Name = "Cell Phone")]
        [Required]
        [StringLength(15)]
        [RegularExpression(@"[0-9 ]+", ErrorMessage = "Numbers only")]
        public string CellPhone { get; set; }

        [Display(Name = "Work Phone")]
        [Required]
        [StringLength(15)]
        [RegularExpression(@"[0-9 ]+", ErrorMessage = "Numbers only")]
        public string WorkPhone { get; set; }


        [Display(Name = "Work Ext.")]
        [Required]
        [StringLength(10)]
        [RegularExpression(@"[0-9 ]+", ErrorMessage = "Numbers only")]
        public string WorkPhoneExtension { get; set; }

        [Display(Name = "Work Fax")]
        [Required]
        [StringLength(15)]
        [RegularExpression(@"[0-9 ]+", ErrorMessage = "Numbers only")]
        public string WorkFax { get; set; }

        [Required]
        [StringLength(15)]
        [RegularExpression(@"[0-9 ]+", ErrorMessage = "Numbers only")]

        [Display(Name = "Other Phone")]
        public string OtherPhone { get; set; }

        [Display(Name = "Work Email")]
        [StringLength(50)]
        [EmailAddress]
        [Required]
        public string WorkEmail { get; set; }

        [Display(Name = "Alt. Email")]
        [StringLength(50)]
        [EmailAddress]
        [Required]
        public string AdditionalEmail { get; set; }

        [Required]
        [StringLength(50)]
        [RegularExpression(@"^[a-zA-Z0-9 ]+$", ErrorMessage = "Letters and numbers only")]
        public string Credentials { get; set; }

        [Required]
        [RegularExpression(@"^[a-zA-Z0-9 ]+$", ErrorMessage = "Letters and numbers only")]
        public string Comments { get; set; }

        [Display(Name = "Resume Name")]
        [Required]
        [StringLength(50)]
        [RegularExpression(@"^[a-zA-Z0-9 ]+$", ErrorMessage = "Letters and numbers only")]
        public string ResumeName { get; set; }
        public string By { get; set; }

        [Display(Name = "Updated")]
        [DataType(DataType.Date)]
        [Required]
        public System.DateTime CreatedOrUpdated { get; set; }
        public int Version { get; set; }
        public bool Active { get; set; }

        public virtual ICollection<ActivityBookingModels> ActivityBookings { get; set; }
        public virtual AppointmentResourceBookingType AppointmentResourceBookingType { get; set; }
        public virtual Country Country { get; set; }
        public virtual ProvinceOrState ProvinceOrState { get; set; }
        public virtual ICollection<AppointmentResourceAvailableTime> AppointmentResourceAvailableTimes { get; set; }
        public virtual ICollection<AppointmentResourceDayOff> AppointmentResourceDayOffs { get; set; }
        public virtual ICollection<CaseManagement> CaseManagements { get; set; }
        public virtual ICollection<CaseProvider> CaseProviders { get; set; }
    }
}